import 'package:flutter/material.dart';

void main() => runApp(InputApp());

class InputApp extends StatefulWidget {
  @override
  State<InputApp> createState() => _InputAppState();
}

class _InputAppState extends State<InputApp> {
  final Icon _iconsD =
      const Icon(Icons.dark_mode_outlined, color: Colors.amber, size: 35);
  final Icon _iconsL =
      const Icon(Icons.light_mode_outlined, color: Colors.black, size: 35);
  bool _isOk = true;
  bool isChecked = false;

  @override
  Widget build(BuildContext context) {
    Color getColor(Set<MaterialState> states) {
      const Set<MaterialState> interactiveStates = <MaterialState>{
        MaterialState.pressed,
        MaterialState.hovered,
        MaterialState.focused,
      };
      if (states.any(interactiveStates.contains)) {
        return Colors.blue;
      }
      return Colors.red;
    }

    return MaterialApp(
      theme: _isOk ? ThemeData.light() : ThemeData.dark(),
      debugShowCheckedModeBanner: false,
      home: Scaffold(
        appBar: AppBar(
          title: const Center(child: Text("Input andSelections")),
          actions: <Widget>[
            IconButton(
                icon: _isOk ? _iconsL : _iconsD,
                onPressed: () {
                  setState(() {
                    _isOk = !_isOk;
                  });
                }),
            const SizedBox(width: 20),
          ],
        ),
        body: Center(
          child: GridView.count(
            crossAxisCount: 4,
            mainAxisSpacing: 2,
            crossAxisSpacing: 2,
            children: <Widget>[
              Container(
                margin: const EdgeInsets.all(10),
                decoration: BoxDecoration(
                  border: Border.all(width: 1),
                  borderRadius: BorderRadius.circular(10),
                ),
                child: Column(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: <Widget>[
                    Checkbox(
                        checkColor: Colors.white,
                        fillColor: MaterialStateProperty.resolveWith(getColor),
                        value: isChecked,
                        onChanged: (value) {
                          setState(() {
                            isChecked = value!;
                          });
                        }),
                    const Text("Input"),
                  ],
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}
